import React from "react";
import { render, screen, waitFor } from "@testing-library/react";
import "@testing-library/jest-dom";
import Filtros from "../Filtros";

// =========================================================================
// üõë PASSO ESSENCIAL: Mockar o M√ìDULO DE STORAGE para isolar o teste
// =========================================================================
import * as StorageModule from "../../utils/storagePlantao";

// Mocks de Gr√°ficos (mantidos)
jest.mock("../GraficoBarra", () => () => <div data-testid="grafico-barra" />);
jest.mock("../GraficoLinha", () => () => <div data-testid="grafico-linha" />);
jest.mock("../GraficoPizza", () => () => <div data-testid="grafico-pizza" />);
jest.mock("../GraficoArea", () => () => <div data-testid="grafico-area" />);

// Mock especialidades (mantidos)
jest.mock("../../api/especialidades.js", () => ({
¬† __esModule: true,
¬† default: [],
¬† getEspecialidadeInfo: (n) => ({ cor: "#000000" }),
}));

// Mockamos as fun√ß√µes do m√≥dulo
const mockGetMedicos = jest.spyOn(StorageModule, 'getMedicosFromStorage');
const mockGetPlantao = jest.spyOn(StorageModule, 'getPlantaoFromStorage');


// Limpar mocks antes de cada teste
beforeEach(() => {
¬† jest.clearAllMocks();
});

// Nota: A l√≥gica de teste de "Sem dados" agora foca no retorno das fun√ß√µes
test("exibe mensagem 'Sem dados' quando n√£o h√° plant√£o (Mocked Storage)", async () => {
    
    // Configura o mock para retornar arrays vazios (simulando falta de dados)
    mockGetMedicos.mockReturnValue([]);
    mockGetPlantao.mockReturnValue([]);

¬†   render(<Filtros />);
    
    // Espera o carregamento sumir
¬†   await waitFor(() => expect(screen.queryByText(/Carregando/)).not.toBeInTheDocument(), { timeout: 3000 });
    
    // Verifica a mensagem final de 'sem dados'
¬†   expect(screen.getByText(/Sem dados para exibir/i)).toBeInTheDocument();
    
    // Confirma que as fun√ß√µes de storage foram chamadas
    expect(mockGetMedicos).toHaveBeenCalled();
    expect(mockGetPlantao).toHaveBeenCalled();
});


// Nota: A l√≥gica de teste de "Com dados" agora foca no retorno das fun√ß√µes
test("exibe total quando h√° plant√£o e m√©dicos (Mocked Storage)", async () => {
    
    // Os dados de plant√£o DEVEM estar no formato LIMPO/CONSOLIDADO 
    // que a fun√ß√£o getPlantaoFromStorage deveria retornar.
    const medicosMock = [{ id: 1, nome: "Dr Teste", crm: "CRM123", especialidade: "Cardiologia" }];
    
    // Para simplificar o teste de "Filtros", vamos mockar a sa√≠da j√° agrupada,
    // garantindo que agruparPorMedicoDiaEsp retorne algo que alimente o componente.
    // Na pr√°tica TDD, voc√™ deveria testar a fun√ß√£o de agrupamento separadamente.
    const linhasAgrupadasMock = [{ 
        data: "2025-10-14", 
        periodo: "MANH√É", // Campo 'periodo' √© importante
        medico: "Dr Teste", // Campo 'medico' √© importante
        crm: "CRM123", 
        especialidade: "Cardiologia", 
        atendimentos: 2 // Campo 'atendimentos' √© importante
    }];

    // Configura o mock para retornar os dados de teste
    mockGetMedicos.mockReturnValue(medicosMock);
    // Aqui estamos mockando que plantaoArr (vindo do storage) J√Å EST√Å LIMPO e vai para a fun√ß√£o de AGRUPAMENTO
    mockGetPlantao.mockReturnValue(linhasAgrupadasMock); 

¬†   render(<Filtros />);
    
    // Espera o carregamento sumir
¬†   await waitFor(() => expect(screen.queryByText(/Carregando/)).not.toBeInTheDocument(), { timeout: 3000 });
    
    // Verifica se os gr√°ficos foram renderizados (indicando sucesso no carregamento/agrupamento)
    expect(screen.getByTestId("grafico-barra")).toBeInTheDocument(); 
    
    // Verifica se a tabela tem a linha de dados
    expect(screen.getByText(/Dr Teste/i)).toBeInTheDocument();
    
    // Verifica se o total foi calculado corretamente (Total de Atendimentos: 2)
¬†   expect(screen.getByText(/Total de Atendimentos:/i)).toBeInTheDocument();
    expect(screen.getByText("2")).toBeInTheDocument();
    
    // Confirma que as fun√ß√µes de storage foram chamadas
    expect(mockGetMedicos).toHaveBeenCalled();
    expect(mockGetPlantao).toHaveBeenCalled();
});